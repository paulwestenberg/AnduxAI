{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "print(\"hello world\")\n# put imports here\nfrom array import *\nimport time\nimport datetime\nimport copy\nimport os\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 47,
      "outputs": [
        {
          "name": "stdout",
          "text": "hello world\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "class Node:\n    # set the variables\n    def __init__(self, board):\n        self.board = board\n    \n    # def setupInitialGame(array):\n    #     for x in range(9):\n    #         if x == 0 or x == 1 or x == 2 or x == 6 or x == 7 or x == 8 :\n    #             array[x] = [' ', ' ', ' ', '1', '1', '1', ' ', ' ', ' ']\n    #     array[4][4] = 0\n\n    # function to get the current board position\n    def returnGame(self):\n        table = \"\"\n        counter = 0\n        for x in self.board:\n            table += str(counter) + \" \"\n            for y in x:\n                table += str(y) + \" \"\n            if counter<8:\n                table += \"\\n\"\n            counter=counter+1\n        print(table)\n        print(\"  0 1 2 3 4 5 6 7 8\")\n        \n    # Move will be \n    def makeMove(self, move):\n        #print(move[0])\n        \n        if move[0] == move[2]:\n            #means the move happens horizontally\n            self.board[int(move[0])][int(move[1])] = '0'\n            self.board[int(move[0])][int((int(move[1])+int(move[3]))/2)] = '0'\n            self.board[int(move[2])][int(move[3])] = '1'\n        elif move[1] == move[3]:\n            #means the move happens vertically\n            self.board[int(move[0])][int(move[1])] = '0'\n            self.board[int((int(move[0])+int(move[2]))/2)][int(move[1])] = '0'\n            self.board[int(move[2])][int(move[3])] = '1'\n            \n    #def possibleMoves(self):\n        \n        \n    #run function\n    def run(self):\n        self.returnGame()\n        self.makeMove(\"4644\")\n        self.returnGame()\n        self.makeMove(\"3133\")\n        self.returnGame()\n        self.makeMove(\"6444\")\n        self.returnGame()\n        self.makeMove(\"5856\")\n        self.returnGame()\n\n\n    \n        \n        \n    \n\n        \n\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "# setting up the initial position\nsize = 9\narray = [['1' for x in range(size)] for y in range(size)]\nfor x in range(9):\n    if x == 0 or x == 1 or x == 2 or x == 6 or x == 7 or x == 8 :\n        array[x] = [' ', ' ', ' ', '1', '1', '1', ' ', ' ', ' ']\narray[4][4] = 0\n\n# creating the object of the \nFirstNode = Node(array)\nFirstNode.run()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 49,
      "outputs": [
        {
          "name": "stdout",
          "text": "0       1 1 1       \n1       1 1 1       \n2       1 1 1       \n3 1 1 1 1 1 1 1 1 1 \n4 1 1 1 1 0 1 1 1 1 \n5 1 1 1 1 1 1 1 1 1 \n6       1 1 1       \n7       1 1 1       \n8       1 1 1       \n  0 1 2 3 4 5 6 7 8\n0       1 1 1       \n1       1 1 1       \n2       1 1 1       \n3 1 1 1 1 1 1 1 1 1 \n4 1 1 1 1 1 0 0 1 1 \n5 1 1 1 1 1 1 1 1 1 \n6       1 1 1       \n7       1 1 1       \n8       1 1 1       \n  0 1 2 3 4 5 6 7 8\n0       1 1 1       \n1       1 1 1       \n2       1 1 1       \n3 1 0 0 1 1 1 1 1 1 \n4 1 1 1 1 1 0 0 1 1 \n5 1 1 1 1 1 1 1 1 1 \n6       1 1 1       \n7       1 1 1       \n8       1 1 1       \n  0 1 2 3 4 5 6 7 8\n0       1 1 1       \n1       1 1 1       \n2       1 1 1       \n3 1 0 0 1 1 1 1 1 1 \n4 1 1 1 1 1 0 0 1 1 \n5 1 1 1 1 0 1 1 1 1 \n6       1 0 1       \n7       1 1 1       \n8       1 1 1       \n  0 1 2 3 4 5 6 7 8\n0       1 1 1       \n1       1 1 1       \n2       1 1 1       \n3 1 0 0 1 1 1 1 1 1 \n4 1 1 1 1 1 0 0 1 1 \n5 1 1 1 1 0 1 1 0 0 \n6       1 0 1       \n7       1 1 1       \n8       1 1 1       \n  0 1 2 3 4 5 6 7 8\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}